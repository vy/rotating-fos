# Copyright 2018-2022 Volkan Yazıcı
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permits and
# limitations under the License.

name: benchmark

on: [workflow_dispatch]

jobs:

  build:

    if: github.repository == 'vy/rotating-fos'

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 8
          java-package: jdk
          architecture: x64
          cache: maven

      - name: Build with Maven
        shell: bash
        run: |
          ./mvnw \
            --show-version --batch-mode --errors --no-transfer-progress \
            -DskipTests=true \
            package

      - name: Upload built sources
        uses: actions/upload-artifact@v3
        with:
          name: built-sources-${{ runner.os }}
          path: target

  run:

    needs: build

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        jdk: [8, 11, 17]
        concurrency: [1, 2]

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built sources
        uses: actions/download-artifact@v3
        with:
          name: built-sources-${{ runner.os }}
          path: target

      - name: Setup JDK ${{ matrix.jdk }}
        if: matrix.jdk != 8
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ matrix.jdk }}
          java-package: jdk
          architecture: x64
          cache: maven

      - name: Run benchmark
        timeout-minutes: 60
        # pwsh (the default shell on Windows) hijacks "exec" keyword
        shell: bash
        run: |
          ./mvnw \
            --show-version --batch-mode --errors --no-transfer-progress \
            -Dexec.classpathScope=test \
            -Dexec.mainClass=com.vlkan.rfos.RotatingFileOutputStreamBenchmark \
            -Drfos.benchmark.quick \
            -Drfos.benchmark.concurrency=${{ matrix.concurrency }} \
            -Drfos.benchmark.jsonOutputFile=results.json \
            exec:java

      - name: Stage benchmark results for commit
        shell: bash
        run: |

          # Determine the artifact version.
          set -x
          ./mvnw \
            --batch-mode --quiet \
            -DforceStdout=true \
            -Dexpression=project.version \
            help:evaluate \
            | tee mvnw-project-version.out
          echo

          # Determine the results file path.
          export REVISION=$(<mvnw-project-version.out)
          export BRANCH_NAME=$(echo "$GITHUB_REF" | sed -r 's/refs\/heads\///g')
          export INSTANT=$(date -u +%Y%m%d)
          export RUN_ID=$(printf "%020d" "$GITHUB_RUN_ID")
          export RESULTS_FILEPATH="benchmark/results/$REVISION/$BRANCH_NAME-$INSTANT-$RUN_ID/results-${{ runner.os }}-J${{ matrix.jdk }}-C${{ matrix.concurrency }}.json"

          # Move the results file.
          mkdir -v -p $(dirname "$RESULTS_FILEPATH")
          mv -v results.json "$RESULTS_FILEPATH"

          # Stash changes for commit.
          git add "$RESULTS_FILEPATH"
          git stash save
          git clean -f

      - name: Commit benchmark results
        timeout-minutes: 1
        shell: bash
        run: |

          # Checkout the results branch.
          set -x
          git fetch origin gh-pages
          git checkout -B gh-pages origin/gh-pages

          # Stage the stashed changes.
          git stash show -p | git apply
          git add benchmark/results
          git status --porcelain
          test $(git status --porcelain | wc -l) -gt 0 || exit 0

          # Commit changes.
          git config user.name github-actions
          git config user.email github-actions@github.com
          git commit -a -m "Add benchmark results for ${{ runner.os }}, JDK ${{ matrix.jdk }}, and concurrency ${{ matrix.concurrency }}."

          # Push changes in a loop to allow concurrent repository modifications.
          export RETRY=0
          while [ 1 ]; do
            set +e
            git push origin gh-pages 2>&1 | tee git-push.out
            if [ $? -eq 0 ]; then
              exit 0
            else
              set -e
              let RETRY+=1
              echo "retry #$RETRY"
              git pull -r origin gh-pages
            fi
          done

  index:

    runs-on: ubuntu-latest
    needs: run

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: gh-pages

      - name: Setup Python 3
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Index benchmark results
        timeout-minutes: 1
        shell: bash
        run: |

          # Configure the git user.
          git config user.name github-actions
          git config user.email github-actions@github.com

          # Push changes in a loop to allow concurrent repository modifications.
          export RETRY=0
          while [ 1 ]; do

            # Generate the index file.
            python -c '\
              import json, os, re;\
              filepaths=[re.sub("^benchmark/results/", "", os.path.join(root,filename)) \
                  for (root, dirs, filenames) in os.walk("benchmark/results") \
                      for filename in filenames]; \
              filepaths.remove("index.json"); \
              print(json.dumps(filepaths))' \
            >benchmark/results/index.json

            # Commit the index file.
            git add benchmark/results/index.json
            git commit benchmark/results/index.json -m "Update benchmark results index."

            # Push the index file.
            set +e
            git push origin gh-pages 2>&1 | tee git-push.out
            if [ $? -eq 0 ]; then
              exit 0
            else
              set -e
              let RETRY+=1
              echo "retry #$RETRY"
              git pull -r origin gh-pages
            fi

          done
